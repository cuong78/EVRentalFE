// S·ª≠ d·ª•ng fetch c√≥ s·∫µn trong Node.js 18+

// Th√¥ng tin user m·ªõi (thay ƒë·ªïi ƒë·ªÉ kh√¥ng tr√πng)
const newUser = {
    username: `testuser${Date.now()}`, // T·∫°o username unique
    email: "dinhphong2728+02@gmail.com", // Thay b·∫±ng email th·∫≠t c·ªßa b·∫°n
    phone: `0123456${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`, // T·∫°o phone unique
    password: "password123",
    confirmPassword: "password123"
};

const API_BASE = 'http://localhost:8080/api';

console.log('üîç Testing New User Registration...');
console.log('üìß Using email:', newUser.email);
console.log('üì± Using phone:', newUser.phone);
console.log('üë§ Using username:', newUser.username);
console.log('');

async function testNewUserFlow() {
    try {
        // 1. Test Register v·ªõi user m·ªõi
        console.log('1. Testing Register with new user...');
        const registerResponse = await fetch(`${API_BASE}/register`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(newUser)
        });

        const registerResult = await registerResponse.json();
        
        if (registerResponse.ok) {
            console.log('‚úÖ Register successful!');
            console.log('üìß Check your email for verification code');
            console.log('üìã Response:', registerResult);
        } else {
            console.log('‚ùå Register failed:', registerResponse.status, registerResult);
            return;
        }

        console.log('');
        console.log('2. Testing Login (should fail - not verified)...');
        
        // 2. Test Login (s·∫Ω fail v√¨ ch∆∞a verify)
        const loginResponse = await fetch(`${API_BASE}/login`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                username: newUser.username,
                password: newUser.password
            })
        });

        const loginResult = await loginResponse.json();
        
        if (loginResponse.status === 400 && loginResult.message.includes('not verified')) {
            console.log('‚úÖ Login correctly failed - account not verified');
            console.log('üìã Response:', loginResult.message);
        } else {
            console.log('‚ö†Ô∏è  Unexpected login response:', loginResponse.status, loginResult);
        }

        console.log('');
        console.log('üìß Next Steps:');
        console.log('1. Check your email:', newUser.email);
        console.log('2. Look for verification email from EVRental');
        console.log('3. Copy the verification code/token');
        console.log('4. Use the verification code to verify your account');
        console.log('5. Then try login again');
        
        console.log('');
        console.log('üß™ To verify manually, you can:');
        console.log('- Check email inbox');
        console.log('- Look for verification link or code');
        console.log('- Use the verification endpoint with the code');
        
        console.log('');
        console.log('üåê Or test via Frontend: http://localhost:3000');
        console.log('   - Register with the same credentials');
        console.log('   - Check email for verification');
        console.log('   - Complete verification flow');

    } catch (error) {
        console.log('‚ùå Error:', error.message);
    }
}

// Ch·∫°y test
testNewUserFlow();
