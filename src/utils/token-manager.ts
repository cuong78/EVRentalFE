import { jwtDecode } from 'jwt-decode';

interface TokenPayload {
    exp: number;
    iat: number;
    sub: string;
    [key: string]: any;
}

class TokenManager {
    private refreshTimer: NodeJS.Timeout | null = null;
    private readonly REFRESH_THRESHOLD = 5 * 60 * 1000; // 5 ph√∫t tr∆∞·ªõc khi h·∫øt h·∫°n
    private isRefreshing = false;

    // Decode JWT token
    decodeToken(token: string): TokenPayload | null {
        try {
            return jwtDecode<TokenPayload>(token);
        } catch (error) {
            console.error('Failed to decode token:', error);
            return null;
        }
    }

    // Ki·ªÉm tra token c√≥ h·∫øt h·∫°n ch∆∞a
    isTokenExpired(token: string): boolean {
        const decoded = this.decodeToken(token);
        if (!decoded) return true;

        const currentTime = Date.now() / 1000;
        return decoded.exp < currentTime;
    }

    // Ki·ªÉm tra token s·∫Øp h·∫øt h·∫°n (trong v√≤ng 5 ph√∫t)
    isTokenExpiringSoon(token: string): boolean {
        const decoded = this.decodeToken(token);
        if (!decoded) return true;

        const currentTime = Date.now() / 1000;
        const timeUntilExpiry = decoded.exp - currentTime;
        return timeUntilExpiry < (this.REFRESH_THRESHOLD / 1000);
    }

    // L·∫•y th·ªùi gian c√≤n l·∫°i c·ªßa token (t√≠nh b·∫±ng gi√¢y)
    getTimeUntilExpiry(token: string): number {
        const decoded = this.decodeToken(token);
        if (!decoded) return 0;

        const currentTime = Date.now() / 1000;
        return Math.max(0, decoded.exp - currentTime);
    }

    // L∆∞u token v√†o localStorage
    saveToken(token: string): void {
        localStorage.setItem('token', token);
        this.scheduleTokenRefresh(token);
    }

    // L·∫•y token t·ª´ localStorage
    getToken(): string | null {
        return localStorage.getItem('token');
    }

    // X√≥a token
    clearToken(): void {
        localStorage.removeItem('token');
        this.clearRefreshTimer();
    }

    // L√™n l·ªãch refresh token
    scheduleTokenRefresh(token: string): void {
        this.clearRefreshTimer();

        const timeUntilExpiry = this.getTimeUntilExpiry(token);
        const timeUntilRefresh = Math.max(0, timeUntilExpiry - (this.REFRESH_THRESHOLD / 1000));

        if (timeUntilRefresh > 0) {
            this.refreshTimer = setTimeout(() => {
                this.refreshToken();
            }, timeUntilRefresh * 1000);
        }
    }

    // Clear refresh timer
    clearRefreshTimer(): void {
        if (this.refreshTimer) {
            clearTimeout(this.refreshTimer);
            this.refreshTimer = null;
        }
    }

    // Refresh token (s·∫Ω ƒë∆∞·ª£c implement b·ªüi authService)
    private async refreshToken(): Promise<void> {
        try {
            // Import ƒë·ªông ƒë·ªÉ tr√°nh circular dependency
            const { authService } = await import('../service/authService');
            const newToken = await authService.refreshToken();
            this.saveToken(newToken);
            console.log('Token refreshed successfully');
        } catch (error) {
            console.error('Failed to refresh token:', error);
            this.clearToken();
            // Kh√¥ng redirect ngay l·∫≠p t·ª©c, ƒë·ªÉ user v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng
            // Ch·ªâ redirect khi th·ª±c s·ª± c·∫ßn thi·∫øt
        }
    }

    // Ki·ªÉm tra v√† refresh token n·∫øu c·∫ßn
    async checkAndRefreshToken(): Promise<boolean> {
        const token = this.getToken();
        if (!token) return false;

        // N·∫øu token ƒë√£ h·∫øt h·∫°n ho√†n to√†n, kh√¥ng th·ªÉ refresh
        if (this.isTokenExpired(token)) {
            console.log('Token ƒë√£ h·∫øt h·∫°n ho√†n to√†n');
            this.clearToken();
            return false;
        }

        // N·∫øu token s·∫Øp h·∫øt h·∫°n (trong v√≤ng 5 ph√∫t), th·ª≠ refresh
        if (this.isTokenExpiringSoon(token)) {
            // Ch·ªâ log m·ªôt l·∫ßn khi b·∫Øt ƒë·∫ßu refresh, kh√¥ng spam
            if (!this.isRefreshing) {
                console.log('üîÑ Token s·∫Øp h·∫øt h·∫°n, ƒëang th·ª≠ refresh...');
                this.isRefreshing = true;
            }

            try {
                const { authService } = await import('../service/authService');
                const newToken = await authService.refreshToken();
                this.saveToken(newToken);
                console.log('‚úÖ Refresh token th√†nh c√¥ng');
                this.isRefreshing = false;
                return true;
            } catch (error) {
                console.error('‚ùå Failed to refresh token:', error);
                this.isRefreshing = false;
                // Kh√¥ng clear token ngay l·∫≠p t·ª©c, ƒë·ªÉ user v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng cho ƒë·∫øn khi th·ª±c s·ª± h·∫øt h·∫°n
                // Ch·ªâ clear khi token th·ª±c s·ª± h·∫øt h·∫°n
                return false; // Return false ƒë·ªÉ kh√¥ng ti·∫øp t·ª•c v√≤ng l·∫∑p
            }
        }

        return true;
    }
}

export const tokenManager = new TokenManager();